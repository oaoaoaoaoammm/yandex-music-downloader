import os
import sys
import requests
import shutil
from yandex_music import Client
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, TIT2, TPE1, TALB, TCON, TLAN

# üîë –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π OAuth-—Ç–æ–∫–µ–Ω
TOKEN = ""

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
client = Client(TOKEN).init()


def get_playlist_info(user_id, playlist_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤)
    —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ client.users_playlist(user_id, playlist_id).
    """
    try:
        playlist = client.users_playlists(playlist_id, user_id)
        return playlist.title, playlist.tracks
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        sys.exit(1)


def download_track(track, playlist_base_folder):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ –¥–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
      1. –í —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è–∑—ã–∫–∞+–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ./<—è–∑—ã–∫>/<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/
      2. –í —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ./<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/
    –í—Å–µ –¥–∞–Ω–Ω—ã–µ (—è–∑—ã–∫, –∫–∞—Ç–µ–≥–æ—Ä–∏—è) –±–µ—Ä—É—Ç—Å—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞.
    """
    title = "Unknown Title"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_obj = track.fetch_track()
        title = track_obj.title
        artist = ", ".join([a.name for a in track_obj.artists])
        album = track_obj.albums[0].title if track_obj.albums else "Unknown Album"
        genre = (track_obj.albums[0].genre
                 if track_obj.albums and track_obj.albums[0].genre
                 else "Unknown Genre")
        cover_url = (track_obj.cover_uri.replace("%%", "200x200")
                     if track_obj.cover_uri else None)

        # –ë–µ—Ä—ë–º —è–∑—ã–∫ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì "Unknown")
        language = track_obj.language if hasattr(track_obj, "language") and track_obj.language else "Unknown"

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(playlist_base_folder, exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ –ø–∞–ø–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞)
        file_name = f"{artist} - {title}.mp3"
        file_path = os.path.join(playlist_base_folder, file_name)
        if os.path.exists(file_path):
            print(f"üîÑ –¢—Ä–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º...")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å –Ω—É–∂–Ω—ã–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
        track_obj.download(file_path, bitrate_in_kbps=320)
        print(f"‚úÖ {title} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç!")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∞–ª—å–±–æ–º, –∂–∞–Ω—Ä, —è–∑—ã–∫ –∏ –æ–±–ª–æ–∂–∫–∞)
        update_mp3_metadata(file_path, title, artist, album, genre, language, cover_url)

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è–∑—ã–∫–∞ + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ./<—è–∑—ã–∫>/<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/
        copy_to_language_structure(file_path, file_name, language, genre)

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ./<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/
        copy_to_category_structure(file_path, file_name, genre)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {title}: {e}")


def update_mp3_metadata(file_path, title, artist, album, genre, language, cover_url):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç ID3-—Ç–µ–≥–∏ MP3-—Ñ–∞–π–ª–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∞–ª—å–±–æ–º, –∂–∞–Ω—Ä –∏ —è–∑—ã–∫ (TLAN).
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL –æ–±–ª–æ–∂–∫–∏, –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–≥–∏.
    """
    try:
        audio = MP3(file_path, ID3=ID3)
        if audio.tags is None:
            audio.add_tags()

        audio.tags.add(TIT2(encoding=3, text=title))
        audio.tags.add(TPE1(encoding=3, text=artist))
        audio.tags.add(TALB(encoding=3, text=album))
        audio.tags.add(TCON(encoding=3, text=genre))
        audio.tags.add(TLAN(encoding=3, text=language))

        if cover_url:
            # –ï—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "https:" –Ω–æ –Ω–µ—Ç –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if cover_url.startswith("https:") and not cover_url.startswith("https://"):
                cover_url = "https://" + cover_url[len("https:"):].lstrip('/')
            elif not (cover_url.startswith("http://") or cover_url.startswith("https://")):
                cover_url = "https://" + cover_url.lstrip('/')
            response = requests.get(cover_url)
            if response.status_code == 200:
                audio.tags.add(APIC(
                    encoding=3,
                    mime='image/jpeg',
                    type=3,  # –æ–±–ª–æ–∂–∫–∞ (front cover)
                    desc='Cover',
                    data=response.content
                ))
                print("üñº –û–±–ª–æ–∂–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É. HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")

        audio.save()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")


def copy_to_language_structure(source_file_path, file_name, language, genre):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ./<—è–∑—ã–∫>/<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/.
    –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è.
    """
    try:
        dest_folder = os.path.join(".", language, genre)
        os.makedirs(dest_folder, exist_ok=True)
        dest_file_path = os.path.join(dest_folder, file_name)
        shutil.copy2(source_file_path, dest_file_path)
        print(f"üìÇ –¢—Ä–µ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —è–∑—ã–∫–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {dest_file_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —è–∑—ã–∫–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")


def copy_to_category_structure(source_file_path, file_name, genre):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ./<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>/.
    –ï—Å–ª–∏ –Ω—É–∂–Ω–∞—è –ø–∞–ø–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è.
    """
    try:
        dest_folder = os.path.join(".", genre)
        os.makedirs(dest_folder, exist_ok=True)
        dest_file_path = os.path.join(dest_folder, file_name)
        shutil.copy2(source_file_path, dest_file_path)
        print(f"üìÇ –¢—Ä–µ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {dest_file_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")


if __name__ == "__main__":
    try:
        raw_url = input("üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: ").strip()
        if not raw_url:
            raise ValueError("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")

        # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç URL:
        # https://music.yandex.ru/users/<user_id>/playlists/<playlist_id>?...
        parts = raw_url.split("/")
        if len(parts) < 2:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ playlist_id (–æ–±—ã—á–Ω–æ user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–¥ "playlists")
        user_id = parts[-3]
        playlist_id = parts[-1].split("?")[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        playlist_name, tracks = get_playlist_info(user_id, playlist_id)
        print(f"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {playlist_name}")
        print(f"üì• –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "./Mood: ŒëŒ≥Œ¨œÄŒ∑")
        playlist_folder = os.path.join(".", playlist_name)
        os.makedirs(playlist_folder, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        for track in tracks:
            download_track(track, playlist_folder)

        print(f"‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ ¬´{playlist_name}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüö™ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)