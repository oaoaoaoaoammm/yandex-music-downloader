import yt_dlp
import os
import sys
import requests
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, TIT2, TPE1, TALB, TCON

def clean_yandex_music_url(url):
    """–û—á–∏—â–∞–µ—Ç URL, —É–¥–∞–ª—è—è UTM-–º–µ—Ç–∫–∏."""
    try:
        return url.split("?")[0] if "?" in url else url
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        sys.exit(1)

def get_playlist_info(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—è yt-dlp)."""
    try:
        ydl_opts = {'quiet': True, 'force_generic_extractor': False}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info.get("title", "Unknown_Playlist"), info.get("entries", [])
    except yt_dlp.utils.DownloadError:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ: {e}")
        sys.exit(1)

def download_track(track, base_folder):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∂–∞–Ω—Ä–∞–º."""
    try:
        title = track.get("title", "Unknown_Title")
        artist = track.get("artist", "Unknown_Artist")
        album = track.get("album", "Unknown_Album")
        genres = track.get("genre", ["Unknown_Genre"])
        cover_url = track.get("thumbnail")

        # –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ "Unknown_Genre"
        if not genres:
            genres = ["Unknown_Genre"]

        for genre in genres:
            genre_folder = os.path.join(base_folder, genre)
            os.makedirs(genre_folder, exist_ok=True)
            file_path = os.path.join(genre_folder, f"{artist} - {title}.mp3")

            # yt-dlp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': file_path,
                'noplaylist': False,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '320',
                }],
            }

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([track["webpage_url"]])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏ —Ç–µ–≥–æ–≤
            if os.path.exists(file_path):
                update_mp3_metadata(file_path, title, artist, album, genre, cover_url)

            print(f"‚úÖ {title} ({genre}) –∑–∞–≥—Ä—É–∂–µ–Ω!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {track.get('title', 'Unknown')}: {e}")

def update_mp3_metadata(file_path, title, artist, album, genre, cover_url):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∞–ª—å–±–æ–º, –∂–∞–Ω—Ä) –∏ –æ–±–ª–æ–∂–∫—É –≤ MP3."""
    try:
        audio = MP3(file_path, ID3=ID3)

        # –î–æ–±–∞–≤–ª—è–µ–º ID3 —Ç–µ–≥–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if audio.tags is None:
            audio.tags = ID3()

        audio.tags.add(TIT2(encoding=3, text=title))  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        audio.tags.add(TPE1(encoding=3, text=artist))  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        audio.tags.add(TALB(encoding=3, text=album))  # –ê–ª—å–±–æ–º
        audio.tags.add(TCON(encoding=3, text=genre))  # –ñ–∞–Ω—Ä

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞ ‚Äì –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ MP3
        if cover_url:
            response = requests.get(cover_url)
            if response.status_code == 200:
                audio.tags.add(APIC(
                    encoding=3,
                    mime='image/jpeg',
                    type=3,
                    desc='Cover',
                    data=response.content
                ))
                print("üñº –û–±–ª–æ–∂–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        audio.save()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        raw_url = input("üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: ").strip()
        if not raw_url:
            raise ValueError("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")

        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        playlist_url = clean_yandex_music_url(raw_url)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {playlist_url}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
        playlist_name, tracks = get_playlist_info(playlist_url)
        print(f"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {playlist_name}")
        print(f"üì• –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")

        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        save_path = f"downloads/{playlist_name}"
        os.makedirs(save_path, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∂–∞–Ω—Ä–∞–º
        for track in tracks:
            download_track(track, save_path)

        print(f"‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ ¬´{playlist_name}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω—ã! üé∂")

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüö™ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
